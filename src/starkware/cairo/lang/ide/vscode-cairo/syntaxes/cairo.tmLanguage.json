{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Cairo",
	"patterns": [
		{
			"include": "#directives"
		},
		{
			"include": "#import"
		},
		{
			"include": "#statements"
		},
		{
			"include": "#type-annotation"
		},
		{
			"include": "#operators"
		}
	],
	"repository": {
		"statements": {
			"patterns": [
				{
					"include": "#embedded-python"
				},
				{
					"include": "#declaration"
				},
				{
					"include": "#control-statement"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#literal"
				},
				{
					"include": "#types"
				},
				{
					"match": "\\b(assert)\\b",
					"name": "keyword.other.cairo"
				},
				{
					"match": "\\b(return|ret)\\b",
					"name": "keyword.control.flow.cairo"
				},
				{
					"include": "#generic-var"
				}
			]
		},
		"parameter": {
			"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?:(:)\\s*([a-zA-Z_][a-zA-Z0-9_*]*))?\\s*(,)?",
			"captures": {
				"1": {
					"name": "variable.parameter.cairo"
				},
				"2": {
					"name": "keyword.operator.type.annotation.cairo"
				},
				"3": {
					"patterns": [
						{
							"include": "#types"
						},
						{
							"name": "support.type.cairo",
							"match": "(?:\\b)([\\w_][\\w\\d_]*)(?:\\b)"
						}
					]
				},
				"4": {
					"name": "punctuation.separator.comma.cairo"
				}
			}
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.arithmetic.cairo",
					"match": "%|\\*|/|-|\\+"
				},
				{
					"name": "keyword.operator.comparison.cairo",
					"match": "=="
				},
				{
					"name": "keyword.operator.assignment.cairo",
					"match": "="
				}
			]
		},
		"function-call": {
			"name": "meta.function-call.cairo",
			"begin": "(?<!func)\\s+([\\w_][\\w\\d_]*)\\(\\s*",
			"patterns": [
				{
					"include": "#literal"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#generic-var"
				}
			],
			"end": "\\)"
		},
		"function-declaration": {
			"name": "meta.function.cairo",
			"begin": "\\b(func)\\s+",
			"beginCaptures": {
				"1": {
					"name": "storage.type.function.cairo"
				}
			},
			"patterns": [
				{
					"name": "meta.function.signature.cairo",
					"begin": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=[{(])",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.cairo"
						}
					},
					"patterns": [
						{
							"name": "meta.parameter.implicit.cairo",
							"begin": "{",
							"patterns": [
								{
									"include": "#parameter"
								}
							],
							"end": "}"
						},
						{
							"name": "meta.parameter.cairo",
							"begin": "\\(",
							"patterns": [
								{
									"include": "#parameter"
								}
							],
							"end": "\\)"
						}
					],
					"end": "(?<=:)",
					"endCaptures": {}
				},
				{
					"include": "#statements"
				}
			],
			"end": "\\b(end)\\b",
			"endCaptures": {
				"1": {
					"name": "storage.type.function.end.cairo"
				}
			}
		},
		"struct-declaration": {
			"name": "meta.struct.cairo",
			"begin": "\\b(?=struct\\b)",
			"patterns": [
				{
					"match": "\\b(struct|end)\\b",
					"name": "storage.type.struct.cairo"
				},
				{
					"match": "(?<=struct\\s*)([\\w_][\\w\\d_]*)\\b",
					"captures": {
						"1": {
							"name": "entity.name.struct.cairo"
						}
					}
				},
				{
					"match": "\\b(member)\\b",
					"name": "keyword.other.cairo"
				},
				{
					"include": "#type-annotation"
				},
				{
					"include": "#comment"
				}
			],
			"end": "(?<=end)\\b"
		},
		"directives": {
			"name": "meta.directive.cairo",
			"begin": "\\B(%)(builtins|lang)\\b",
			"beginCaptures": {
				"2": {
					"name": "entity.name.directive.cairo"
				}
			},
			"patterns": [
				{
					"begin": "(?<=builtins)\\b",
					"patterns": [
						{
							"match": "\\b([\\w_][\\w\\d_]*)\\b",
							"name": "entity.name.builtins.cairo"
						}
					],
					"end": "(?=\\n|\\r)"
				},
				{
					"begin": "(?<=lang)\\b",
					"patterns": [
						{
							"match": "\\b([\\w_][\\w\\d_]*)\\b",
							"name": "entity.name.lang.cairo"
						}
					],
					"end": "(?=\\n|\\r)"
				}
			],
			"end": "(?:\\n|\\r)"
		},
		"declaration": {
			"patterns": [
				{
					"include": "#struct-declaration"
				},
				{
					"include": "#function-call"
				},
				{
					"include": "#function-declaration"
				},
				{
					"name": "meta.var.expr.cairo",
					"begin": "\\b(?=let|const|tempvar|local)\\b",
					"patterns": [
						{
							"name": "storage.type.cairo",
							"match": "\\b(let|const|tempvar|local)\\b"
						},
						{
							"include": "#type-annotation"
						},
						{
							"include": "#statements"
						}
					],
					"end": "[\\n\\r]"
				}
			]
		},
		"control-statement": {
			"patterns": [
				{
					"include": "#if-statement"
				},
				{
					"name": "keyword.control.conditional.cairo",
					"match": "\\b(if|else)\\b"
				}
			]
		},
		"for-loop": {
			"begin": "\\b(for)\\b"
		},
		"if-statement": {
			"name": "meta.control.if.cairo",
			"begin": "\\b(if)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.conditional.cairo"
				},
				"2": {
					"name": "entity.name.condition.cairo"
				}
			},
			"patterns": [
				{
					"include": "#statements"
				}
			],
			"contentName": "source.cairo",
			"end": "\\b(end)\\b",
			"endCaptures": {
				"0": {
					"name": "keyword.control.end.cairo"
				}
			}
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.line.number-sign.cairo",
					"match": "#[^\n]*\n"
				}
			]
		},
		"literal": {
			"patterns": [
				{
					"include": "#string"
				},
				{
					"include": "#number"
				}
			]
		},
		"string": {
			"patterns": [
				{
					"name": "string.quoted.double",
					"match": "\\B(\"\\w*\")\\B"
				}
			]
		},
		"number": {
			"patterns": [
				{
					"name": "constant.numeric.decimal.cairo",
					"match": "\\b([0-9]+)\\b"
				},
				{
					"name": "constant.numeric.hexadecimal.cairo",
					"match": "\\b(0x[a-fA-F0-9]+)\\b"
				}
			]
		},
		"import": {
			"name": "meta.import.cairo",
			"begin": "^(?=from\\s)",
			"patterns": [
				{
					"begin": "\\b(from)\\b",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.from.cairo"
						}
					},
					"end": "\\b(?=import\\b)"
				},
				{
					"begin": "\\b(import)\\b",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.import.cairo"
						}
					},
					"end": "(?=[\\n\\r])"
				}
			],
			"end": "[\\n\\r]"
		},
		"type-annotation": {
			"name": "meta.type.annotation.cairo",
			"match": "\\b([\\w_][\\w\\d_]*)\\s*(:)\\s*([\\w_][\\w\\d_]*)\\b",
			"captures": {
				"1": {
					"patterns": [
						{
							"include": "#generic-var"
						}
					]
				},
				"2": {
					"name": "keyword.operator.type.annotation.cairo"
				},
				"3": {
					"patterns": [
						{
							"include": "#types"
						},
						{
							"name": "support.type.cairo",
							"match": "(?:\\b)([\\w_][\\w\\d_]*)(?:\\b)"
						}
					]
				}
			}
		},
		"types": {
			"patterns": [
				{
					"name": "support.type.primitive.cairo",
					"match": "\\b(felt)\\b"
				}
			]
		},
		"generic-var": {
			"name": "variable.other.cairo",
			"match": "\\b([\\w_][\\w\\d_]*)\\b"
		},
		"embedded-python": {
			"patterns": [
				{
					"name": "meta.embedded.block.python",
					"begin": "%{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.embedded.begin.python"
						}
					},
					"end": "%}",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.embedded.end.python"
						},
						"1": {
							"name": "source.python"
						}
					},
					"contentName": "source.python",
					"patterns": [
						{
							"include": "source.python"
						}
					]
				},
				{
					"begin": "%\\[",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.embedded.begin.python"
						}
					},
					"end": "%\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.embedded.end.python"
						},
						"1": {
							"name": "source.python"
						}
					},
					"name": "meta.embedded.block.python",
					"contentName": "source.python",
					"patterns": [
						{
							"include": "source.python"
						}
					]
				}
			]
		},
		"unnamed": {
			"match": "\\b(SIZEOF_LOCALS|SIZE)\\b",
			"name": "support.constant.cairo"
		}
	},
	"scopeName": "source.cairo"
}